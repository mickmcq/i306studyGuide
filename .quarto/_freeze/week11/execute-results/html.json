{
  "hash": "9bf7f71f240401407515a4318bcd7de3",
  "result": {
    "markdown": "---\ntitle: \"Coping with Time and Joins\"\n---\n\n\n\n\n## Recap week 10: Multiple Regression; Logistic Regression\n- Multiple regression: one $y$ and multiple $x$ variables\n- Logistic regression: $y$ is a factor and multiple $x$ variables\n\n## Milestones\nMilestone 4 will be graded partly on the diagnostic plots and their explanations and partly on improvements to the rest of the report.\n\n### Tips for Milestone 4\n- Don't use `fread()` or `data.table` any more\n- Instead use `read_csv` (not `read.csv`)\n- Label the r chunks\n- Break your file up into smaller files to prepare, then assemble\n- Make plots look better\n  - Include a title\n  - Don't use scientific notation\n  - don't overprint labels\n\n### More tips\n- Don't produce long outputs that a manager would be unable to use\n  - Example: a list of 50 states with some statistic about them\n- Don't produce barplots where all bars are roughly the same size\n- Don't produce stem-and-leaf plots with so much output that no one can read them\n- Sort barplots for easier comparison\n- It's hard to use tables with more than about 30 rows\n\n### Why is this plot unsuccessful?\n![](fiUnsuccessfulPlot.png)\n\n### Don't include barplots with all same bars\n![](fiBarsSameHeight.png)\n\n(just say there was little difference along this dimension)\n\n### More tips\n- Don't include names of group members in sections of the report, only in the header\n- Put titles on plots even if you have section titles as well\n- Use small `alpha` values to reduce the impact of overplotting\n\n### Significant overplotting\n![](fiOverplotting.png)\n\n### Don't use barplots with two bars for presentations\n![](fiTwoBars.png)\n\n(There may be exceptions in exploration but not presentation)\n\n### Don't use barplots with effectively one bar\n![](fiOneBar.png)\n\n(Also don't include the blank entries!)\n\n### Unreadable stem-and-leaf plot\n![](fiUnreadableStem.png)\n\n### This one has no meaning that I can see\n![](fiIndecipherable.png)\n\n## Dates and times\nFor the final exam, you will have to create the $y$ variable as a time span. Chapter 18 of @Wickham2023 tells you how to do this. Let's review that chapter.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(nycflights13)\ntoday()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-09-30\"\n```\n:::\n\n```{.r .cell-code}\nnow()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2023-09-30 18:05:49 CDT\"\n```\n:::\n:::\n\n\nSuppose you have a comma-separated-values (csv) file containing ISO-formatted dates or date-times. It's automatically recognized.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncsv <- \"\n  date,datetime\n  2022-01-02,2022-01-02 05:12\n\"\nread_csv(csv)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  date       datetime           \n  <date>     <dttm>             \n1 2022-01-02 2022-01-02 05:12:00\n```\n:::\n:::\n\n\nSuppose your input has dates not in standard format. You can do this for an ambiguous format:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncsv <- \"\n  date\n  01/02/15\n\"\n\nread_csv(csv, col_types = cols(date = col_date(\"%m/%d/%y\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  date      \n  <date>    \n1 2015-01-02\n```\n:::\n\n```{.r .cell-code}\nread_csv(csv, col_types = cols(date = col_date(\"%d/%m/%y\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  date      \n  <date>    \n1 2015-02-01\n```\n:::\n\n```{.r .cell-code}\nread_csv(csv, col_types = cols(date = col_date(\"%y/%m/%d\")))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 1\n  date      \n  <date>    \n1 2001-02-15\n```\n:::\n:::\n\n\nThe letters after the percent signs are format specifiers. @Wickham2023 has a long list of them in Chapter 18.\n\nAn alternative to the above approach is to use the helpers in the `lubridate` package, which is part of the `tidyverse` collection of packages. There are two kinds of helpers. First are the date helpers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nymd(\"2017-01-31\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2017-01-31\"\n```\n:::\n\n```{.r .cell-code}\nmdy(\"January 31st, 2017\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2017-01-31\"\n```\n:::\n\n```{.r .cell-code}\ndmy(\"31-Jan-2017\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2017-01-31\"\n```\n:::\n:::\n\n\nSecond are the date-time helpers.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nymd_hms(\"2017-01-31 20:11:59\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2017-01-31 20:11:59 UTC\"\n```\n:::\n\n```{.r .cell-code}\nmdy_hm(\"01/31/2017 08:01\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2017-01-31 08:01:00 UTC\"\n```\n:::\n:::\n\n\nThe `nycflights13` data frame, which we loaded above, contains information about 336,000 flights originating from the three NYC area airports in 2013. It contains dats and times spread across different columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  select(year, month, day, hour, minute)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 5\n    year month   day  hour minute\n   <int> <int> <int> <dbl>  <dbl>\n 1  2013     1     1     5     15\n 2  2013     1     1     5     29\n 3  2013     1     1     5     40\n 4  2013     1     1     5     45\n 5  2013     1     1     6      0\n 6  2013     1     1     5     58\n 7  2013     1     1     6      0\n 8  2013     1     1     6      0\n 9  2013     1     1     6      0\n10  2013     1     1     6      0\n# ℹ 336,766 more rows\n```\n:::\n:::\n\n\nYou can handle this kind of input by using the `make_datetime()` function.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights |>\n  select(year, month, day, hour, minute) |>\n  mutate(departure = make_datetime(year, month, day, hour, minute))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 6\n    year month   day  hour minute departure          \n   <int> <int> <int> <dbl>  <dbl> <dttm>             \n 1  2013     1     1     5     15 2013-01-01 05:15:00\n 2  2013     1     1     5     29 2013-01-01 05:29:00\n 3  2013     1     1     5     40 2013-01-01 05:40:00\n 4  2013     1     1     5     45 2013-01-01 05:45:00\n 5  2013     1     1     6      0 2013-01-01 06:00:00\n 6  2013     1     1     5     58 2013-01-01 05:58:00\n 7  2013     1     1     6      0 2013-01-01 06:00:00\n 8  2013     1     1     6      0 2013-01-01 06:00:00\n 9  2013     1     1     6      0 2013-01-01 06:00:00\n10  2013     1     1     6      0 2013-01-01 06:00:00\n# ℹ 336,766 more rows\n```\n:::\n:::\n\n\nYou can do the same with the other time columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmake_datetime_100 <- function(year, month, day, time) {\n  make_datetime(year, month, day, time %/% 100, time %% 100)\n}\n\nflights_dt <- flights |>\n  filter(!is.na(dep_time), !is.na(arr_time)) |>\n  mutate(\n    dep_time = make_datetime_100(year, month, day, dep_time),\n    arr_time = make_datetime_100(year, month, day, arr_time),\n    sched_dep_time = make_datetime_100(year, month, day, sched_dep_time),\n    sched_arr_time = make_datetime_100(year, month, day, sched_arr_time)\n  ) |>\n  select(origin, dest, ends_with(\"delay\"), ends_with(\"time\"))\n\nflights_dt\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 328,063 × 9\n   origin dest  dep_delay arr_delay dep_time            sched_dep_time     \n   <chr>  <chr>     <dbl>     <dbl> <dttm>              <dttm>             \n 1 EWR    IAH           2        11 2013-01-01 05:17:00 2013-01-01 05:15:00\n 2 LGA    IAH           4        20 2013-01-01 05:33:00 2013-01-01 05:29:00\n 3 JFK    MIA           2        33 2013-01-01 05:42:00 2013-01-01 05:40:00\n 4 JFK    BQN          -1       -18 2013-01-01 05:44:00 2013-01-01 05:45:00\n 5 LGA    ATL          -6       -25 2013-01-01 05:54:00 2013-01-01 06:00:00\n 6 EWR    ORD          -4        12 2013-01-01 05:54:00 2013-01-01 05:58:00\n 7 EWR    FLL          -5        19 2013-01-01 05:55:00 2013-01-01 06:00:00\n 8 LGA    IAD          -3       -14 2013-01-01 05:57:00 2013-01-01 06:00:00\n 9 JFK    MCO          -3        -8 2013-01-01 05:57:00 2013-01-01 06:00:00\n10 LGA    ORD          -2         8 2013-01-01 05:58:00 2013-01-01 06:00:00\n# ℹ 328,053 more rows\n# ℹ 3 more variables: arr_time <dttm>, sched_arr_time <dttm>, air_time <dbl>\n```\n:::\n:::\n\n\nHere are the departure times for January 2nd, 2013.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights_dt |>\n  filter(dep_time < ymd(20130102)) |>\n  ggplot(aes(x = dep_time)) +\n  geom_freqpoly(binwidth = 600) # 600 s = 10 minutes\n```\n\n::: {.cell-output-display}\n![](week11_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n## Time spans\n\n- Durations, which represent an exact number of seconds.\n- Periods, which represent human units like weeks and months.\n- Intervals, which represent a starting and ending point.\n\n### Durations\n\nBase R provides a problematic construct for durations, the *difftime* object.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#. How old is Hadley?\nh_age <- today() - ymd(\"1979-10-14\")\nh_age\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTime difference of 16057 days\n```\n:::\n:::\n\n\nThe `lubridate` package provides a construct called *duration*.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.duration(h_age)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1387324800s (~43.96 years)\"\n```\n:::\n:::\n\n\nThere are numerous duration constructors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndseconds(15)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"15s\"\n```\n:::\n\n```{.r .cell-code}\ndminutes(10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"600s (~10 minutes)\"\n```\n:::\n\n```{.r .cell-code}\ndhours(c(12, 24))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"43200s (~12 hours)\" \"86400s (~1 days)\"  \n```\n:::\n\n```{.r .cell-code}\nddays(0:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"0s\"                \"86400s (~1 days)\"  \"172800s (~2 days)\"\n[4] \"259200s (~3 days)\" \"345600s (~4 days)\" \"432000s (~5 days)\"\n```\n:::\n\n```{.r .cell-code}\ndweeks(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1814400s (~3 weeks)\"\n```\n:::\n\n```{.r .cell-code}\ndyears(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"31557600s (~1 years)\"\n```\n:::\n:::\n\n\nYou can add and multiply durations.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n2 * dyears(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"63115200s (~2 years)\"\n```\n:::\n\n```{.r .cell-code}\ndyears(1) + dweeks(12) + dhours(15)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"38869200s (~1.23 years)\"\n```\n:::\n:::\n\n\nYou can add and subtract durations to and from days.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntomorrow <- today() + ddays(1)\nlast_year <- today() - dyears(1)\n```\n:::\n\n\nProblem! Add one day to this particular date as a duration, but this particular date only has 23 hours because of daylight savings time.\n\n\n::: {.cell}\n\n```{.r .cell-code}\none_am <- ymd_hms(\"2026-03-08 01:00:00\", tz = \"America/New_York\")\n\none_am\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2026-03-08 01:00:00 EST\"\n```\n:::\n\n```{.r .cell-code}\none_am + ddays(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2026-03-09 02:00:00 EDT\"\n```\n:::\n:::\n\n\n## Periods\nThis construct gets over some problems with durations, which are always exact numbers of seconds and take into account time zones and daylight savings time and leap years.\n\nPeriods have constructors, too.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhours(c(12, 24))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"12H 0M 0S\" \"24H 0M 0S\"\n```\n:::\n\n```{.r .cell-code}\ndays(7)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"7d 0H 0M 0S\"\n```\n:::\n\n```{.r .cell-code}\nmonths(1:6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1m 0d 0H 0M 0S\" \"2m 0d 0H 0M 0S\" \"3m 0d 0H 0M 0S\" \"4m 0d 0H 0M 0S\"\n[5] \"5m 0d 0H 0M 0S\" \"6m 0d 0H 0M 0S\"\n```\n:::\n:::\n\n\nYou can add and multiply periods.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n10 * (months(6) + days(1))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"60m 10d 0H 0M 0S\"\n```\n:::\n\n```{.r .cell-code}\ndays(50) + hours(25) + minutes(2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"50d 25H 2M 0S\"\n```\n:::\n:::\n\n\nAdd them to dates and get the results you expect in the case of daylight savings time and leap years.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#. A leap year\nymd(\"2024-01-01\") + dyears(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2024-12-31 06:00:00 UTC\"\n```\n:::\n\n```{.r .cell-code}\nymd(\"2024-01-01\") + years(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2025-01-01\"\n```\n:::\n\n```{.r .cell-code}\n#. Daylight Savings Time\none_am + ddays(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2026-03-09 02:00:00 EDT\"\n```\n:::\n\n```{.r .cell-code}\none_am + days(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"2026-03-09 01:00:00 EDT\"\n```\n:::\n:::\n\n\nPeriods can fix the problem that some planes appear to arrive before they depart.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights_dt |>\n  filter(arr_time < dep_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 10,633 × 9\n   origin dest  dep_delay arr_delay dep_time            sched_dep_time     \n   <chr>  <chr>     <dbl>     <dbl> <dttm>              <dttm>             \n 1 EWR    BQN           9        -4 2013-01-01 19:29:00 2013-01-01 19:20:00\n 2 JFK    DFW          59        NA 2013-01-01 19:39:00 2013-01-01 18:40:00\n 3 EWR    TPA          -2         9 2013-01-01 20:58:00 2013-01-01 21:00:00\n 4 EWR    SJU          -6       -12 2013-01-01 21:02:00 2013-01-01 21:08:00\n 5 EWR    SFO          11       -14 2013-01-01 21:08:00 2013-01-01 20:57:00\n 6 LGA    FLL         -10        -2 2013-01-01 21:20:00 2013-01-01 21:30:00\n 7 EWR    MCO          41        43 2013-01-01 21:21:00 2013-01-01 20:40:00\n 8 JFK    LAX          -7       -24 2013-01-01 21:28:00 2013-01-01 21:35:00\n 9 EWR    FLL          49        28 2013-01-01 21:34:00 2013-01-01 20:45:00\n10 EWR    FLL          -9       -14 2013-01-01 21:36:00 2013-01-01 21:45:00\n# ℹ 10,623 more rows\n# ℹ 3 more variables: arr_time <dttm>, sched_arr_time <dttm>, air_time <dbl>\n```\n:::\n:::\n\n\nThese are overnight flights so fix the problem by adding a day.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights_dt <- flights_dt |>\n  mutate(\n    overnight = arr_time < dep_time,\n    arr_time = arr_time + days(!overnight),\n    sched_arr_time = sched_arr_time + days(overnight)\n  )\n```\n:::\n\n\n### Intervals\nIntervals are like durations but with a specific starting point. They get around the problem that, for example, some years are longer than others, so that a year on average is 365.25 days. With an interval you can have a specific year of 365 days or a specific leap year of 366 days.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny2023 <- ymd(\"2023-01-01\") %--% ymd(\"2024-01-01\")\ny2024 <- ymd(\"2024-01-01\") %--% ymd(\"2025-01-01\")\n\ny2023\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2023-01-01 UTC--2024-01-01 UTC\n```\n:::\n\n```{.r .cell-code}\ny2024\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2024-01-01 UTC--2025-01-01 UTC\n```\n:::\n\n```{.r .cell-code}\ny2023 / days(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 365\n```\n:::\n\n```{.r .cell-code}\ny2024 / days(1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 366\n```\n:::\n:::\n\n\nThe book also provides extensive information about time zones but for the final exam you'll only have one time zone, so that discussion is not strictly necessary for us.\n\n## Joins\n\nThe `nycflights13` package provides five data frames that can be joined together.\n\n![](fiNYCflights13.png)\n\nWhy would you store data this way? (Think about using the data over a long term and think about maintenance of the data.)\n\nYou can add the airline names to the flights by a `left_join()` function. It's easier to see if you first limit the `flights` data frame to a few essential columns.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nflights2 <- flights |>\n  select(year, time_hour, origin, dest, tailnum, carrier)\nflights2 |> left_join(airlines)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 336,776 × 7\n    year time_hour           origin dest  tailnum carrier name                  \n   <int> <dttm>              <chr>  <chr> <chr>   <chr>   <chr>                 \n 1  2013 2013-01-01 05:00:00 EWR    IAH   N14228  UA      United Air Lines Inc. \n 2  2013 2013-01-01 05:00:00 LGA    IAH   N24211  UA      United Air Lines Inc. \n 3  2013 2013-01-01 05:00:00 JFK    MIA   N619AA  AA      American Airlines Inc.\n 4  2013 2013-01-01 05:00:00 JFK    BQN   N804JB  B6      JetBlue Airways       \n 5  2013 2013-01-01 06:00:00 LGA    ATL   N668DN  DL      Delta Air Lines Inc.  \n 6  2013 2013-01-01 05:00:00 EWR    ORD   N39463  UA      United Air Lines Inc. \n 7  2013 2013-01-01 06:00:00 EWR    FLL   N516JB  B6      JetBlue Airways       \n 8  2013 2013-01-01 06:00:00 LGA    IAD   N829AS  EV      ExpressJet Airlines I…\n 9  2013 2013-01-01 06:00:00 JFK    MCO   N593JB  B6      JetBlue Airways       \n10  2013 2013-01-01 06:00:00 LGA    ORD   N3ALAA  AA      American Airlines Inc.\n# ℹ 336,766 more rows\n```\n:::\n:::\n\n\nThere are several different join functions described in @Wickham2023 in Chapter 20. You'll only need the left join for this week's exercises, but reading Chapter 20 is still a very good idea.\n\nYou should also read about [sqldf](https://www.rdocumentation.org/packages/sqldf/versions/0.4-11), a package for running SQL statements on R data frames. Following is an example of its use.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(sqldf)\nsqldf(\"SELECT carrier, COUNT(*)\n         FROM flights\n         GROUP BY carrier\n         ORDER BY 2 DESC;\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   carrier COUNT(*)\n1       UA    58665\n2       B6    54635\n3       EV    54173\n4       DL    48110\n5       AA    32729\n6       MQ    26397\n7       US    20536\n8       9E    18460\n9       WN    12275\n10      VX     5162\n11      FL     3260\n12      AS      714\n13      F9      685\n14      YV      601\n15      HA      342\n16      OO       32\n```\n:::\n\n```{.r .cell-code}\nsqlFlightsWnames <- sqldf(\"SELECT fl.carrier, name\n                             FROM flights fl\n                             LEFT join airlines ai\n                             ON fl.carrier=ai.carrier;\")\nsqldf(\"SELECT name, COUNT(*)\n         FROM sqlFlightsWnames\n         GROUP BY name\n         ORDER BY 2 DESC;\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                          name COUNT(*)\n1        United Air Lines Inc.    58665\n2              JetBlue Airways    54635\n3     ExpressJet Airlines Inc.    54173\n4         Delta Air Lines Inc.    48110\n5       American Airlines Inc.    32729\n6                    Envoy Air    26397\n7              US Airways Inc.    20536\n8            Endeavor Air Inc.    18460\n9       Southwest Airlines Co.    12275\n10              Virgin America     5162\n11 AirTran Airways Corporation     3260\n12        Alaska Airlines Inc.      714\n13      Frontier Airlines Inc.      685\n14          Mesa Airlines Inc.      601\n15      Hawaiian Airlines Inc.      342\n16       SkyWest Airlines Inc.       32\n```\n:::\n\n```{.r .cell-code}\nsort(table(flights$carrier),decreasing=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n   UA    B6    EV    DL    AA    MQ    US    9E    WN    VX    FL    AS    F9 \n58665 54635 54173 48110 32729 26397 20536 18460 12275  5162  3260   714   685 \n   YV    HA    OO \n  601   342    32 \n```\n:::\n\n```{.r .cell-code}\nflightsWnames <- flights |> left_join(airlines)\nsort(table(flightsWnames$name),decreasing=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n      United Air Lines Inc.             JetBlue Airways \n                      58665                       54635 \n   ExpressJet Airlines Inc.        Delta Air Lines Inc. \n                      54173                       48110 \n     American Airlines Inc.                   Envoy Air \n                      32729                       26397 \n            US Airways Inc.           Endeavor Air Inc. \n                      20536                       18460 \n     Southwest Airlines Co.              Virgin America \n                      12275                        5162 \nAirTran Airways Corporation        Alaska Airlines Inc. \n                       3260                         714 \n     Frontier Airlines Inc.          Mesa Airlines Inc. \n                        685                         601 \n     Hawaiian Airlines Inc.       SkyWest Airlines Inc. \n                        342                          32 \n```\n:::\n:::\n\n\nThe only difference between the output of these two approaches is that the native R plus tidyverse version uses more horizontal space in the output because of its use of a variable that records how wide your display is. The SQL version is piped (by default) to SQLite3, which doesn't know the width of your display and which returns a single column response. You can substitute other database engines for SQLite3, such as PostgreSQL and MySQL. SQLite3 is an extremely fast, tiny database engine which is useful for single-user applications. For example, most smartphone applications (including all Android and iOS) use SQLite3 to store information, making SQLite3 the world's most popular database (by some measures). SQLite3 is also used by most web browsers to store information.\n\nRecently (like within the last month) it was brought to the attention of the faculty that students want to learn more SQL. That's the reason I've added this mention of `sqldf`. In a later iteration of the course, I will require some use of SQL but I learned of the need for this too late to incorporate it this semester. So your study of `sqldf` this semester will be optional.\n\n",
    "supporting": [
      "week11_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}