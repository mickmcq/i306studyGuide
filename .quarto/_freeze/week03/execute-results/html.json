{
  "hash": "f6a30ce4d68f3c8a03f01c5055562f69",
  "result": {
    "markdown": "---\ntitle: \"More about R and Quarto\"\n---\n\n\n\n\n## Recap Week 02\n\nWe did some exercises, for which there are now solutions in the file `week02.qmd` and `week02.html`. You should examine and compare these two files, especially the exercise parts.\n\nI deleted the `week02a.qmd` and `week02a.html` files and you should too. The `week02.qmd` file and the `week02.html` file contain both corrections and additions, so only refer to those.\n\n## Week 03: More on R and Quarto\n\nI've established groups for the milestones. I'm open to moving you around if needed, subject to the constraint that we have no more than five members in a group. Currently we have six groups of five so, if you want to switch groups, you need to find someone in the other group who wants to switch to your group.\n\nI've added a bunch of files to the Files section on Canvas, pertaining to Milestone 1. You need to download these files. One of them (`vehicles.csv`) is quite large and time-consuming to download, so don't wait.\n\n### The template files\n\n### Categorical Data\n\nThe template files show how you can begin the milestones. Notice that I have named the data frame as `df` in the `template.qmd` file. As a result, I can write functions like the following.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\ndf <- read_csv(paste0(Sys.getenv(\"STATS_DATA_DIR\"),\"/vehicles.csv\"))\ndf |> count(title_status,sort=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7 × 2\n  title_status      n\n  <chr>         <int>\n1 clean        405117\n2 <NA>           8242\n3 rebuilt        7219\n4 salvage        3868\n5 lien           1422\n6 missing         814\n7 parts only      198\n```\n:::\n:::\n\n\nThe above is a good way to investigate categorical data. Notice that I've used the pipe character, so that the data frame `df` is sent to the `count()` function. Then a particular categorical column of `df` is counted and sorted in descending numerical order. The `count()` function is part of the `dplyr` package, which is one of the `tidyverse` packages. You only need to load the `tidyverse` set of packages once in a document, preferably near the beginning.\n\nAnother point about the above result is that the `count()` function behaves different for large numbers of values. For example, `region` has 404 values. The `count()` function will just display the first and last 5 by default. I can make it work by adding the print fuction:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |> count(region,sort=TRUE) |> print(n=404)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 404 × 2\n    region                         n\n    <chr>                      <int>\n  1 columbus                    3608\n  2 jacksonville                3562\n  3 spokane / coeur d'alene     2988\n  4 eugene                      2985\n  5 fresno / madera             2983\n  6 orlando                     2983\n  7 bend                        2982\n  8 omaha / council bluffs      2982\n  9 kennewick-pasco-richland    2981\n 10 new hampshire               2981\n 11 nashville                   2980\n 12 salem                       2980\n 13 oklahoma city               2979\n 14 reno / tahoe                2979\n 15 boston                      2978\n 16 rochester                   2978\n 17 sarasota-bradenton          2977\n 18 stockton                    2977\n 19 boise                       2976\n 20 portland                    2976\n 21 houston                     2975\n 22 south jersey                2974\n 23 minneapolis / st paul       2973\n 24 modesto                     2973\n 25 philadelphia                2973\n 26 seattle-tacoma              2973\n 27 grand rapids                2972\n 28 baltimore                   2971\n 29 las vegas                   2971\n 30 milwaukee                   2971\n 31 pittsburgh                  2971\n 32 cincinnati                  2970\n 33 sacramento                  2970\n 34 tulsa                       2970\n 35 washington, DC              2970\n 36 austin                      2969\n 37 north jersey                2969\n 38 tucson                      2969\n 39 charlotte                   2968\n 40 maine                       2966\n 41 atlanta                     2965\n 42 hawaii                      2964\n 43 long island                 2964\n 44 central NJ                  2961\n 45 phoenix                     2960\n 46 detroit metro               2959\n 47 dallas / fort worth         2957\n 48 kansas city, MO             2957\n 49 ft myers / SW florida       2955\n 50 cleveland                   2953\n 51 san diego                   2953\n 52 albuquerque                 2952\n 53 denver                      2952\n 54 orange county               2952\n 55 inland empire               2950\n 56 new york city               2950\n 57 norfolk / hampton roads     2946\n 58 tampa bay area              2945\n 59 st louis, MO                2940\n 60 los angeles                 2937\n 61 SF bay area                 2936\n 62 chicago                     2929\n 63 des moines                  2923\n 64 south florida               2920\n 65 raleigh / durham / CH       2918\n 66 colorado springs            2914\n 67 san antonio                 2891\n 68 knoxville                   2763\n 69 anchorage / mat-su          2742\n 70 hartford                    2564\n 71 albany                      2537\n 72 bakersfield                 2528\n 73 redding                     2526\n 74 springfield                 2520\n 75 ventura county              2518\n 76 vermont                     2513\n 77 fayetteville                2415\n 78 madison                     2387\n 79 fort collins / north CO     2385\n 80 richmond                    2346\n 81 greenville / upstate        2327\n 82 rhode island                2320\n 83 bellingham                  2313\n 84 indianapolis                2303\n 85 akron / canton              2211\n 86 greensboro                  2078\n 87 western massachusetts       2039\n 88 buffalo                     2006\n 89 palm springs                1978\n 90 el paso                     1977\n 91 medford-ashland             1962\n 92 louisville                  1938\n 93 worcester / central MA      1914\n 94 little rock                 1841\n 95 ocala                       1828\n 96 dayton / springfield        1787\n 97 yuba-sutter                 1747\n 98 memphis                     1724\n 99 yakima                      1704\n100 billings                    1701\n101 wichita                     1694\n102 hudson valley               1692\n103 birmingham                  1647\n104 new haven                   1644\n105 daytona beach               1633\n106 charleston                  1509\n107 chico                       1486\n108 san luis obispo             1455\n109 monterey bay                1451\n110 asheville                   1423\n111 toledo                      1406\n112 columbia                    1388\n113 missoula                    1378\n114 lansing                     1367\n115 jackson                     1351\n116 space coast                 1346\n117 syracuse                    1338\n118 fredericksburg              1328\n119 wenatchee                   1324\n120 new orleans                 1321\n121 huntsville / decatur        1273\n122 appleton-oshkosh-FDL        1261\n123 lehigh valley               1261\n124 flint                       1258\n125 columbia / jeff city        1257\n126 bozeman                     1249\n127 kalamazoo                   1236\n128 western slope               1188\n129 corpus christi              1176\n130 treasure coast              1173\n131 corvallis/albany            1168\n132 roanoke                     1121\n133 lexington                   1115\n134 tri-cities                  1110\n135 ann arbor                   1085\n136 rockford                    1059\n137 east idaho                  1052\n138 santa barbara               1052\n139 lakeland                    1048\n140 myrtle beach                1043\n141 chattanooga                 1038\n142 green bay                   1033\n143 winston-salem               1027\n144 mcallen / edinburg          1019\n145 scranton / wilkes-barre     1008\n146 moses lake                   994\n147 tyler / east TX              992\n148 lancaster                    988\n149 kalispell                    978\n150 harrisburg                   976\n151 wilmington                   975\n152 fargo / moorhead             969\n153 south bend / michiana        969\n154 st cloud                     954\n155 delaware                     949\n156 gainesville                  926\n157 visalia-tulare               922\n158 eastern NC                   895\n159 flagstaff / sedona           881\n160 saginaw-midland-baycity      876\n161 hickory / lenoir             853\n162 eau claire                   846\n163 jersey shore                 838\n164 erie                         805\n165 santa fe / taos              801\n166 twin falls                   794\n167 fort wayne                   788\n168 clarksville                  785\n169 york                         777\n170 tallahassee                  771\n171 gold country                 765\n172 duluth / superior            763\n173 kenosha-racine               757\n174 prescott                     746\n175 pueblo                       746\n176 santa maria                  740\n177 baton rouge                  733\n178 wausau                       726\n179 east oregon                  720\n180 olympic peninsula            717\n181 lewiston / clarkston         710\n182 skagit / island / SJI        701\n183 boulder                      694\n184 oregon coast                 694\n185 macon / warner robins        687\n186 quad cities, IA/IL           687\n187 waco                         681\n188 winchester                   672\n189 youngstown                   664\n190 killeen / temple / ft hood   662\n191 merced                       654\n192 cedar rapids                 648\n193 south coast                  645\n194 charlottesville              642\n195 battle creek                 639\n196 mobile                       626\n197 pensacola                    622\n198 sioux falls / SE SD          621\n199 northern michigan            612\n200 wyoming                      610\n201 athens                       607\n202 utica-rome-oneida            607\n203 lincoln                      604\n204 cape cod / islands           598\n205 pullman / moscow             595\n206 wichita falls                589\n207 eastern CT                   583\n208 topeka                       582\n209 amarillo                     564\n210 southern illinois            555\n211 waterloo / cedar falls       555\n212 holland                      534\n213 brainerd                     533\n214 monroe                       530\n215 great falls                  524\n216 la crosse                    521\n217 savannah / hinesville        516\n218 rapid city / west SD         502\n219 lynchburg                    496\n220 lubbock                      492\n221 lima / findlay               485\n222 salt lake city               485\n223 augusta                      480\n224 southwest michigan           476\n225 binghamton                   474\n226 muskegon                     473\n227 poconos                      464\n228 north mississippi            462\n229 central michigan             461\n230 mankato                      445\n231 finger lakes                 439\n232 mohave county                435\n233 odessa / midland             433\n234 peoria                       432\n235 danville                     427\n236 fairbanks                    427\n237 shreveport                   422\n238 reading                      416\n239 bowling green                415\n240 northwest GA                 415\n241 watertown                    414\n242 evansville                   413\n243 montgomery                   408\n244 southern maryland            405\n245 northwest CT                 397\n246 sioux city                   393\n247 humboldt county              385\n248 elmira-corning               379\n249 harrisonburg                 375\n250 eastern shore                368\n251 bemidji                      365\n252 altoona-johnstown            364\n253 st george                    362\n254 williamsport                 362\n255 brownsville                  361\n256 mansfield                    359\n257 las cruces                   358\n258 port huron                   358\n259 upper peninsula              355\n260 janesville                   343\n261 klamath falls                343\n262 boone                        338\n263 jonesboro                    337\n264 laredo                       337\n265 yuma                         335\n266 joplin                       328\n267 st augustine                 328\n268 fort smith                   327\n269 dothan                       325\n270 florence                     324\n271 st joseph                    323\n272 college station              313\n273 zanesville / cambridge       313\n274 morgantown                   307\n275 ithaca                       303\n276 panama city                  298\n277 roseburg                     294\n278 frederick                    288\n279 beaumont / port arthur       287\n280 the thumb                    286\n281 annapolis                    285\n282 western maryland             285\n283 texoma                       284\n284 imperial county              282\n285 champaign urbana             281\n286 sheboygan                    281\n287 new river valley             275\n288 glens falls                  274\n289 ashtabula                    270\n290 northern panhandle           268\n291 parkersburg-marietta         264\n292 northern WI                  262\n293 valdosta                     262\n294 lafayette / west lafayette   260\n295 chillicothe                  257\n296 plattsburgh-adirondacks      256\n297 helena                       255\n298 southwest VA                 254\n299 iowa city                    253\n300 eastern panhandle            251\n301 manhattan                    251\n302 muncie / anderson            248\n303 southeast missouri           245\n304 sandusky                     244\n305 victoria                     243\n306 sierra vista                 241\n307 mendocino county             238\n308 lake of the ozarks           236\n309 abilene                      235\n310 north central FL             230\n311 dubuque                      228\n312 galveston                    225\n313 chautauqua                   221\n314 kenai peninsula              221\n315 bloomington                  217\n316 bloomington-normal           217\n317 mason city                   217\n318 eastern kentucky             213\n319 grand island                 212\n320 western KY                   212\n321 texarkana                    211\n322 state college                210\n323 gadsden-anniston             207\n324 lawton                       207\n325 florida keys                 203\n326 lawrence                     199\n327 stillwater                   198\n328 terre haute                  198\n329 ames                         194\n330 okaloosa / walton            194\n331 grand forks                  192\n332 cookeville                   189\n333 brunswick                    187\n334 hilton head                  186\n335 cumberland valley            179\n336 lafayette                    179\n337 san marcos                   179\n338 hanford-corcoran             178\n339 meadville                    177\n340 southeast IA                 175\n341 decatur                      171\n342 heartland florida            170\n343 high rockies                 169\n344 salina                       168\n345 florence / muscle shoals     165\n346 tuscaloosa                   162\n347 san angelo                   161\n348 kokomo                       156\n349 lake charles                 156\n350 mattoon-charleston           156\n351 tuscarawas co                154\n352 logan                        152\n353 catskills                    147\n354 northwest OK                 145\n355 northwest KS                 143\n356 auburn                       142\n357 owensboro                    140\n358 statesboro                   140\n359 farmington                   136\n360 twin tiers NY/PA             136\n361 butte                        134\n362 central louisiana            132\n363 gulfport / biloxi            127\n364 north dakota                 126\n365 elko                         120\n366 kirksville                   119\n367 southeast KS                 119\n368 susanville                   119\n369 huntington-ashland           118\n370 scottsbluff / panhandle      117\n371 la salle co                  116\n372 show low                     112\n373 outer banks                  109\n374 del rio / eagle pass         108\n375 potsdam-canton-massena       102\n376 roswell / carlsbad           100\n377 hattiesburg                   99\n378 southwest KS                  96\n379 bismarck                      92\n380 south dakota                  90\n381 deep east texas               88\n382 houma                         88\n383 fort dodge                    87\n384 southeast alaska              84\n385 siskiyou county               83\n386 north platte                  80\n387 clovis / portales             78\n388 ogden-clearfield              76\n389 eastern montana               75\n390 provo / orem                  75\n391 western IL                    63\n392 oneonta                       62\n393 southwest MN                  56\n394 pierre / central SD           55\n395 eastern CO                    40\n396 southern WV                   36\n397 st louis                      35\n398 northeast SD                  34\n399 southwest TX                  30\n400 meridian                      28\n401 southwest MS                  14\n402 kansas city                   11\n403 fort smith, AR                 9\n404 west virginia (old)            8\n```\n:::\n:::\n\n\nThe number 404 is because there are 404 elements in the\nlist.\n\nAnother solution (more cumbersome) follows.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf %>%\n  group_by(region) %>%\n  do(data.frame(nrow=nrow(.))) %>%\n  arrange(desc(nrow)) %>%\n  print(n=40)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 404 × 2\n# Groups:   region [404]\n   region                    nrow\n   <chr>                    <int>\n 1 columbus                  3608\n 2 jacksonville              3562\n 3 spokane / coeur d'alene   2988\n 4 eugene                    2985\n 5 fresno / madera           2983\n 6 orlando                   2983\n 7 bend                      2982\n 8 omaha / council bluffs    2982\n 9 kennewick-pasco-richland  2981\n10 new hampshire             2981\n11 nashville                 2980\n12 salem                     2980\n13 oklahoma city             2979\n14 reno / tahoe              2979\n15 boston                    2978\n16 rochester                 2978\n17 sarasota-bradenton        2977\n18 stockton                  2977\n19 boise                     2976\n20 portland                  2976\n21 houston                   2975\n22 south jersey              2974\n23 minneapolis / st paul     2973\n24 modesto                   2973\n25 philadelphia              2973\n26 seattle-tacoma            2973\n27 grand rapids              2972\n28 baltimore                 2971\n29 las vegas                 2971\n30 milwaukee                 2971\n31 pittsburgh                2971\n32 cincinnati                2970\n33 sacramento                2970\n34 tulsa                     2970\n35 washington, DC            2970\n36 austin                    2969\n37 north jersey              2969\n38 tucson                    2969\n39 charlotte                 2968\n40 maine                     2966\n# ℹ 364 more rows\n```\n:::\n:::\n\n\nAnother way to investigate categorical data is through contingency tables. You have already made some of these using the `table()` function and some associated functions that are mentioned in the `week02.qmd` file. It will take some intuition to figure out which pairs of categorical columns should be tabulated for Milestone 1.\n\n### Numerical Data\n\nFor numerical data, you can do what we did last week to investigate a single column.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(df$price)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n0.000e+00 5.900e+03 1.395e+04 7.520e+04 2.649e+04 3.737e+09 \n```\n:::\n:::\n\n\nor\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(scales)\ndf$price <- as.double(df$price)\ndf %>%\n    summarize(Min=comma(min(price)),\n              firstq=comma(quantile(price,0.25)),\n              Median=comma(median(price)),\n              Mean=comma(mean(price)),\n              thirdq=comma(quantile(price,0.75)),\n              Max=comma(max(price)))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 6\n  Min   firstq Median Mean   thirdq Max          \n  <chr> <chr>  <chr>  <chr>  <chr>  <chr>        \n1 0     5,900  13,950 75,199 26,486 3,736,928,711\n```\n:::\n\n```{.r .cell-code}\ndf$price <- as.integer(df$price)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: NAs introduced by coercion to integer range\n```\n:::\n:::\n\n\nYou'll notice that one of the prices is 3.7 billion dollars for a Toyota truck! This is obviously a misprint! You should probably remove this row from the data frame and save the data frame without it. A more sophisticated alternative would be to impute a value for this truck. There are many advanced statistical ways to do this, but they are beyond the scope of this course. @vanBuuren2018 describes several excellent ways to do so, particularly in that book's Section 5.1.1, Recommended Workflows. It is usually a mistake to use an average for missing (NA) values because to do so compresses the variance unnaturally. You may remove that particular row by saying `df <- df[-(which.max(df$price)),]`. Unfortunately, you will find that not to be very useful because there are several prices of over a billion dollars for generic cars! In fact, there are several with prices listed as `1234567890` and some listed at `987654321`. Many other ridiculous patterns can be found for price. So what can you do? Personally, I would add the following line right after reading in the file:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- df[df$price<100000&df$price>0,]\n```\n:::\n\n\nThis will rid the data frame of cars priced at greater than 100,000 dollars and still leave you with over 300,000 automobiles to analyze. Of course, there are will still be spurious entries, but at least it's a start. The above code will also get rid of cars priced at exactly zero dollars. Examination of the data frame will show that many of the zero dollar entries are just ads for used car dealers. The expression `price<100000&price>0` is called a compound Boolean expression. It is compound because of the ampersand, which stands for the word *and*. It means that the row has to contain a price less than 100,000 AND it also has to be a price greater than zero.\n\nBy the way, this is a good reminder that a data frame has a row and a column index. You can refer to rows by saying `df[`*expression*`,]` and to columns by saying `df[,`*expression*`]`. The *expression* can be any mathematical expression that resolves to TRUE or FALSE. The above expression resolves to TRUE for cars priced at greater than zero but less than 100,000 dollars, and FALSE for cars priced at any integer greater than or equal to 100,000. You can tell that `price` is a 64 bit integer by saying `str(df)` which will tell the structure of the `df` data frame. You should be able to see that most of the columns are classified as `chr` or character. This is not desirable. Most of the columns clasified as `chr` should more properly be classified as factors. Factors take up less space on your computer, are faster to process, and allow more types of processing than `chr`. Unfortunately, if you store your intermediate work as a `.csv` file, you will lose the factor designation. Therefore, I recommend that you do the following.\n\nStep 1. Get rid of rows you don't want, such as those with prices over or under some threshold value you choose.\n\nStep 2. Get rid of columns you don't want to analyze, such as url or VIN.\n\nStep 3. Convert some of the `chr` columns to factor. For instance, you can say `df$state <- as.factor(df$state)`.\n\nStep 4. Save your file by saying something like `save(df,file=\"df.RData\")`\n\nStep 5. Quit using this file and open a file called `intermediate.qmd`\n\nStep 6. At the beginning of that file, say `load(\"df.RData\")`.\n\nStep 7. Do all your work in that file, then paste the work back into your `template.qmd` file so you can run it as required. (Remember, you are not turning in a `.RData` file. Your `m1.qmd` file must start with reading in the `vehicles.csv` file and do processing on the resulting data frame.)\n\nStep 8. Merge your `template.qmd` file with those of your group members into one `m1.qmd` file. For example, you could name all your individual template files with your names and one group member could merge them together. This should be easy for Milestone 1 since an obvious way to divide up your work is to assign different columns to different group members.\n\n### Combining numerical and categorical selection\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndfX <- subset(df,state %in% c(\"ca\",\"ny\") & type %in% c(\"sedan\",\"SUV\") & price<99999 & price>0)\ntbl <- table(dfX$state,dfX$type)\naddmargins(tbl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     \n      sedan   SUV   Sum\n  ca  11086  7429 18515\n  ny   3747  3224  6971\n  Sum 14833 10653 25486\n```\n:::\n:::\n\n\nAbove is an example of getting a small contingency table with only the data you want. The first line selects only cars offered in ca or ny, only sedans or SUVs, and only with prices below 99,999 dollars and more than zero dollars.\nThen we can make a compact contingency table of that new data frame and add the margins to it.\n\n### Getting the data displayed as you wish\nSomeone asked me how to display price ranges by\nmanufacturer. Here's one way to do that:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  group_by(manufacturer) |>\n  reframe(min = min(price),max=max(price)) |>\n  print(n=43)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 43 × 3\n   manufacturer      min        max\n   <chr>           <int>      <int>\n 1 acura               0     139999\n 2 alfa-romeo          0      62950\n 3 aston-martin        0     179888\n 4 audi                0     160000\n 5 bmw                 0  113456789\n 6 buick               0  123456789\n 7 cadillac            0     195000\n 8 chevrolet          NA         NA\n 9 chrysler            0     655000\n10 datsun              1      30000\n11 dodge               0    6995495\n12 ferrari             0     449500\n13 fiat                0      32500\n14 ford                0 1111111111\n15 gmc                 0  123456789\n16 harley-davidson     0      39900\n17 honda               0     123456\n18 hyundai             0      50000\n19 infiniti            0      69995\n20 jaguar              0     150000\n21 jeep                0 1410065407\n22 kia                 0      55325\n23 land rover          0      55000\n24 lexus               0     114950\n25 lincoln             0    1234567\n26 mazda               0      45000\n27 mercedes-benz      NA         NA\n28 mercury             0      95000\n29 mini                0      42500\n30 mitsubishi          0      40000\n31 morgan           1000      36500\n32 nissan              0  135008900\n33 pontiac             0     105000\n34 porsche             0     304995\n35 ram                 0   17000000\n36 rover               0     129888\n37 saturn              0    2000000\n38 subaru              0     195000\n39 tesla               0     104990\n40 toyota             NA         NA\n41 volkswagen          0     149000\n42 volvo               0 1234567890\n43 <NA>                0  123456789\n```\n:::\n:::\n\n\nThe number 43 is because there are 43 manufacturers in\nthe data frame. Note that, using the `reframe()`\nfunction, I could add a few more comma-separated statistics to the\noutput.\n\n### A function between numeric and visual\n\nMilestone 1 is supposed to be entirely about numeric descriptions of the data, not visual descriptions, which will be covered in Milestone 2. Yet there is one function that exists in a gray area between numeric and graphical. That is the stem and leaf plot. Consider the following output.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstem(df$odometer)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  The decimal point is 6 digit(s) to the right of the |\n\n  0 | 00000000000000000000000000000000000000000000000000000000000000000000+421502\n  1 | 00000000000000000000000000000000000000000000000000000000000000000000+562\n  2 | 000000000000000000111122223333333335555566666677789\n  3 | 02333357\n  4 | 0577777777\n  5 | 005556666666669\n  6 | 15\n  7 | 555678888888888888\n  8 | 04789999\n  9 | 000189\n  10 | 00000000000000000000000000000000000000000000000000000000000000000000+58\n```\n:::\n:::\n\n\nThe output does not need any graphical processor. It is only characters that can be included in text. Yet it is a kind of graphic because you can see, for instance, that of the cars have either very little mileage on the odometer or very much. Read it like this:\n\n- The *stem* is the vertical line.\n- The numbers to the left of the stem are, in this case, numbers in the sixth place to the left of the decimal point. In other words the first row represents zero to 999999.\n- Each character to the right of the stem represents one car. There are probably 80 zeros in the first row. The `+390151` indicates that there are 390,151 cars in that category that are not represented. The numbers in these cases represent the next significant digit after the one on the stem.\n- It is probably easier to read a stem and leaf plot for a smaller data frame, in the following case for the first 100 cars in the above data frame.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstem(df$odometer[1:100])\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n  The decimal point is 4 digit(s) to the right of the |\n\n   0 | 0222788900012223447789999\n   2 | 11267799000004555678\n   4 | 01123335568\n   6 | 39117\n   8 | 0804567\n  10 | 0\n  12 | 8\n  14 | 5\n  16 | 6\n  18 | 2\n```\n:::\n:::\n\n\nThese entries come from a reduced data frame where I first ran the above code, getting rid of the high-priced and free cars. It may make it easier to understand to look at the entries themselves.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(df$odometer,n=100L) |> sort(decreasing=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 192000 176144 144700 128000  99615  97000  96003  95000  94020  90000\n[11]  88000  80318  77087  71229  70760  68696  63129  57923  55783  55251\n[21]  55068  43182  43000  42755  41568  41124  40784  39508  37725  37332\n[31]  35835  35320  35290  34940  34152  30237  30176  30047  30041  29652\n[41]  29499  28942  26978  26685  26129  22120  20856  20581  19179  19160\n[51]  18650  18531  17805  17302  16594  14230  14169  13035  12302  12231\n[61]  12102  10688   9954   9859   9704   8663   8141   7885   6897   2195\n[71]   1834   1722     21\n```\n:::\n:::\n\n\nThe very first row in the stem and leaf plot above counts cars priced at less than 20,000 dollars. There are 28 of them. They all have 0 or 1 in the fifth position to the left of the decimal. Only one of those, which is offered at 21 dollars, has zeros in both of the first two positions. It is the very first entry after the stem, represented as a zero. The next three entries are the cars that sell for the next lowest prices, between zero and 2 in the next decimal position. They are represented as 2s. You can see at a glance that, in this group of 100 cars, the lower odometer readings predominate. By the way, the `stem()` function discards `NA` values before processing the remainder. So there are only a total of 78 characters to the right of the stem on all the rows put together.\n\nThere is some difference of opinion as to whether `stem()` is graphical or numerical. What do you think?\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}