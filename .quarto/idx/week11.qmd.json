{"title":"Coping with Time and Joins","markdown":{"yaml":{"title":"Coping with Time and Joins"},"headingText":"Recap week 10: Multiple Regression; Logistic Regression","containsRefs":false,"markdown":"\n\n```{r, include=FALSE}\nknitr::opts_chunk$set(\n  message=FALSE\n)\n```\n\n- Multiple regression: one $y$ and multiple $x$ variables\n- Logistic regression: $y$ is a factor and multiple $x$ variables\n\n## Milestones\nMilestone 4 will be graded partly on the diagnostic plots and their explanations and partly on improvements to the rest of the report.\n\n### Tips for Milestone 4\n- Don't use `fread()` or `data.table` any more\n- Instead use `read_csv` (not `read.csv`)\n- Label the r chunks\n- Break your file up into smaller files to prepare, then assemble\n- Make plots look better\n  - Include a title\n  - Don't use scientific notation\n  - don't overprint labels\n\n### More tips\n- Don't produce long outputs that a manager would be unable to use\n  - Example: a list of 50 states with some statistic about them\n- Don't produce barplots where all bars are roughly the same size\n- Don't produce stem-and-leaf plots with so much output that no one can read them\n- Sort barplots for easier comparison\n- It's hard to use tables with more than about 30 rows\n\n### Why is this plot unsuccessful?\n![](fiUnsuccessfulPlot.png)\n\n### Don't include barplots with all same bars\n![](fiBarsSameHeight.png)\n\n(just say there was little difference along this dimension)\n\n### More tips\n- Don't include names of group members in sections of the report, only in the header\n- Put titles on plots even if you have section titles as well\n- Use small `alpha` values to reduce the impact of overplotting\n\n### Significant overplotting\n![](fiOverplotting.png)\n\n### Don't use barplots with two bars for presentations\n![](fiTwoBars.png)\n\n(There may be exceptions in exploration but not presentation)\n\n### Don't use barplots with effectively one bar\n![](fiOneBar.png)\n\n(Also don't include the blank entries!)\n\n### Unreadable stem-and-leaf plot\n![](fiUnreadableStem.png)\n\n### This one has no meaning that I can see\n![](fiIndecipherable.png)\n\n## Dates and times\nFor the final exam, you will have to create the $y$ variable as a time span. Chapter 18 of @Wickham2023 tells you how to do this. Let's review that chapter.\n\n```{r}\nlibrary(tidyverse)\nlibrary(nycflights13)\ntoday()\nnow()\n```\n\nSuppose you have a comma-separated-values (csv) file containing ISO-formatted dates or date-times. It's automatically recognized.\n\n```{r}\ncsv <- \"\n  date,datetime\n  2022-01-02,2022-01-02 05:12\n\"\nread_csv(csv)\n```\n\nSuppose your input has dates not in standard format. You can do this for an ambiguous format:\n\n```{r}\ncsv <- \"\n  date\n  01/02/15\n\"\n\nread_csv(csv, col_types = cols(date = col_date(\"%m/%d/%y\")))\n\nread_csv(csv, col_types = cols(date = col_date(\"%d/%m/%y\")))\n\nread_csv(csv, col_types = cols(date = col_date(\"%y/%m/%d\")))\n```\n\nThe letters after the percent signs are format specifiers. @Wickham2023 has a long list of them in Chapter 18.\n\nAn alternative to the above approach is to use the helpers in the `lubridate` package, which is part of the `tidyverse` collection of packages. There are two kinds of helpers. First are the date helpers.\n\n```{r}\nymd(\"2017-01-31\")\nmdy(\"January 31st, 2017\")\ndmy(\"31-Jan-2017\")\n```\n\nSecond are the date-time helpers.\n\n```{r}\nymd_hms(\"2017-01-31 20:11:59\")\nmdy_hm(\"01/31/2017 08:01\")\n```\n\nThe `nycflights13` data frame, which we loaded above, contains information about 336,000 flights originating from the three NYC area airports in 2013. It contains dats and times spread across different columns.\n\n```{r}\nflights |>\n  select(year, month, day, hour, minute)\n```\n\nYou can handle this kind of input by using the `make_datetime()` function.\n\n```{r}\nflights |>\n  select(year, month, day, hour, minute) |>\n  mutate(departure = make_datetime(year, month, day, hour, minute))\n```\n\nYou can do the same with the other time columns.\n\n```{r}\nmake_datetime_100 <- function(year, month, day, time) {\n  make_datetime(year, month, day, time %/% 100, time %% 100)\n}\n\nflights_dt <- flights |>\n  filter(!is.na(dep_time), !is.na(arr_time)) |>\n  mutate(\n    dep_time = make_datetime_100(year, month, day, dep_time),\n    arr_time = make_datetime_100(year, month, day, arr_time),\n    sched_dep_time = make_datetime_100(year, month, day, sched_dep_time),\n    sched_arr_time = make_datetime_100(year, month, day, sched_arr_time)\n  ) |>\n  select(origin, dest, ends_with(\"delay\"), ends_with(\"time\"))\n\nflights_dt\n```\n\nHere are the departure times for January 2nd, 2013.\n\n```{r}\nflights_dt |>\n  filter(dep_time < ymd(20130102)) |>\n  ggplot(aes(x = dep_time)) +\n  geom_freqpoly(binwidth = 600) # 600 s = 10 minutes\n```\n\n## Time spans\n\n- Durations, which represent an exact number of seconds.\n- Periods, which represent human units like weeks and months.\n- Intervals, which represent a starting and ending point.\n\n### Durations\n\nBase R provides a problematic construct for durations, the *difftime* object.\n\n```{r}\n#. How old is Hadley?\nh_age <- today() - ymd(\"1979-10-14\")\nh_age\n```\n\nThe `lubridate` package provides a construct called *duration*.\n\n```{r}\nas.duration(h_age)\n```\n\nThere are numerous duration constructors.\n\n```{r}\ndseconds(15)\ndminutes(10)\ndhours(c(12, 24))\nddays(0:5)\ndweeks(3)\ndyears(1)\n```\n\nYou can add and multiply durations.\n\n```{r}\n2 * dyears(1)\ndyears(1) + dweeks(12) + dhours(15)\n```\n\nYou can add and subtract durations to and from days.\n\n```{r}\ntomorrow <- today() + ddays(1)\nlast_year <- today() - dyears(1)\n```\n\nProblem! Add one day to this particular date as a duration, but this particular date only has 23 hours because of daylight savings time.\n\n```{r}\none_am <- ymd_hms(\"2026-03-08 01:00:00\", tz = \"America/New_York\")\n\none_am\none_am + ddays(1)\n```\n\n## Periods\nThis construct gets over some problems with durations, which are always exact numbers of seconds and take into account time zones and daylight savings time and leap years.\n\nPeriods have constructors, too.\n\n```{r}\nhours(c(12, 24))\ndays(7)\nmonths(1:6)\n```\n\nYou can add and multiply periods.\n\n```{r}\n10 * (months(6) + days(1))\ndays(50) + hours(25) + minutes(2)\n```\n\nAdd them to dates and get the results you expect in the case of daylight savings time and leap years.\n\n```{r}\n#. A leap year\nymd(\"2024-01-01\") + dyears(1)\nymd(\"2024-01-01\") + years(1)\n\n#. Daylight Savings Time\none_am + ddays(1)\none_am + days(1)\n```\n\nPeriods can fix the problem that some planes appear to arrive before they depart.\n\n```{r}\nflights_dt |>\n  filter(arr_time < dep_time)\n```\n\nThese are overnight flights so fix the problem by adding a day.\n\n```{r}\nflights_dt <- flights_dt |>\n  mutate(\n    overnight = arr_time < dep_time,\n    arr_time = arr_time + days(!overnight),\n    sched_arr_time = sched_arr_time + days(overnight)\n  )\n```\n\n### Intervals\nIntervals are like durations but with a specific starting point. They get around the problem that, for example, some years are longer than others, so that a year on average is 365.25 days. With an interval you can have a specific year of 365 days or a specific leap year of 366 days.\n\n```{r}\ny2023 <- ymd(\"2023-01-01\") %--% ymd(\"2024-01-01\")\ny2024 <- ymd(\"2024-01-01\") %--% ymd(\"2025-01-01\")\n\ny2023\ny2024\n\ny2023 / days(1)\ny2024 / days(1)\n```\n\nThe book also provides extensive information about time zones but for the final exam you'll only have one time zone, so that discussion is not strictly necessary for us.\n\n## Joins\n\nThe `nycflights13` package provides five data frames that can be joined together.\n\n![](fiNYCflights13.png)\n\nWhy would you store data this way? (Think about using the data over a long term and think about maintenance of the data.)\n\nYou can add the airline names to the flights by a `left_join()` function. It's easier to see if you first limit the `flights` data frame to a few essential columns.\n\n```{r}\nflights2 <- flights |>\n  select(year, time_hour, origin, dest, tailnum, carrier)\nflights2 |> left_join(airlines)\n```\n\nThere are several different join functions described in @Wickham2023 in Chapter 20. You'll only need the left join for this week's exercises, but reading Chapter 20 is still a very good idea.\n\nYou should also read about [sqldf](https://www.rdocumentation.org/packages/sqldf/versions/0.4-11), a package for running SQL statements on R data frames. Following is an example of its use.\n\n```{r}\nlibrary(sqldf)\nsqldf(\"SELECT carrier, COUNT(*)\n         FROM flights\n         GROUP BY carrier\n         ORDER BY 2 DESC;\")\nsqlFlightsWnames <- sqldf(\"SELECT fl.carrier, name\n                             FROM flights fl\n                             LEFT join airlines ai\n                             ON fl.carrier=ai.carrier;\")\nsqldf(\"SELECT name, COUNT(*)\n         FROM sqlFlightsWnames\n         GROUP BY name\n         ORDER BY 2 DESC;\")\nsort(table(flights$carrier),decreasing=TRUE)\nflightsWnames <- flights |> left_join(airlines)\nsort(table(flightsWnames$name),decreasing=TRUE)\n```\n\nThe only difference between the output of these two approaches is that the native R plus tidyverse version uses more horizontal space in the output because of its use of a variable that records how wide your display is. The SQL version is piped (by default) to SQLite3, which doesn't know the width of your display and which returns a single column response. You can substitute other database engines for SQLite3, such as PostgreSQL and MySQL. SQLite3 is an extremely fast, tiny database engine which is useful for single-user applications. For example, most smartphone applications (including all Android and iOS) use SQLite3 to store information, making SQLite3 the world's most popular database (by some measures). SQLite3 is also used by most web browsers to store information.\n\nRecently (like within the last month) it was brought to the attention of the faculty that students want to learn more SQL. That's the reason I've added this mention of `sqldf`. In a later iteration of the course, I will require some use of SQL but I learned of the need for this too late to incorporate it this semester. So your study of `sqldf` this semester will be optional.\n\n","srcMarkdownNoYaml":"\n\n```{r, include=FALSE}\nknitr::opts_chunk$set(\n  message=FALSE\n)\n```\n\n## Recap week 10: Multiple Regression; Logistic Regression\n- Multiple regression: one $y$ and multiple $x$ variables\n- Logistic regression: $y$ is a factor and multiple $x$ variables\n\n## Milestones\nMilestone 4 will be graded partly on the diagnostic plots and their explanations and partly on improvements to the rest of the report.\n\n### Tips for Milestone 4\n- Don't use `fread()` or `data.table` any more\n- Instead use `read_csv` (not `read.csv`)\n- Label the r chunks\n- Break your file up into smaller files to prepare, then assemble\n- Make plots look better\n  - Include a title\n  - Don't use scientific notation\n  - don't overprint labels\n\n### More tips\n- Don't produce long outputs that a manager would be unable to use\n  - Example: a list of 50 states with some statistic about them\n- Don't produce barplots where all bars are roughly the same size\n- Don't produce stem-and-leaf plots with so much output that no one can read them\n- Sort barplots for easier comparison\n- It's hard to use tables with more than about 30 rows\n\n### Why is this plot unsuccessful?\n![](fiUnsuccessfulPlot.png)\n\n### Don't include barplots with all same bars\n![](fiBarsSameHeight.png)\n\n(just say there was little difference along this dimension)\n\n### More tips\n- Don't include names of group members in sections of the report, only in the header\n- Put titles on plots even if you have section titles as well\n- Use small `alpha` values to reduce the impact of overplotting\n\n### Significant overplotting\n![](fiOverplotting.png)\n\n### Don't use barplots with two bars for presentations\n![](fiTwoBars.png)\n\n(There may be exceptions in exploration but not presentation)\n\n### Don't use barplots with effectively one bar\n![](fiOneBar.png)\n\n(Also don't include the blank entries!)\n\n### Unreadable stem-and-leaf plot\n![](fiUnreadableStem.png)\n\n### This one has no meaning that I can see\n![](fiIndecipherable.png)\n\n## Dates and times\nFor the final exam, you will have to create the $y$ variable as a time span. Chapter 18 of @Wickham2023 tells you how to do this. Let's review that chapter.\n\n```{r}\nlibrary(tidyverse)\nlibrary(nycflights13)\ntoday()\nnow()\n```\n\nSuppose you have a comma-separated-values (csv) file containing ISO-formatted dates or date-times. It's automatically recognized.\n\n```{r}\ncsv <- \"\n  date,datetime\n  2022-01-02,2022-01-02 05:12\n\"\nread_csv(csv)\n```\n\nSuppose your input has dates not in standard format. You can do this for an ambiguous format:\n\n```{r}\ncsv <- \"\n  date\n  01/02/15\n\"\n\nread_csv(csv, col_types = cols(date = col_date(\"%m/%d/%y\")))\n\nread_csv(csv, col_types = cols(date = col_date(\"%d/%m/%y\")))\n\nread_csv(csv, col_types = cols(date = col_date(\"%y/%m/%d\")))\n```\n\nThe letters after the percent signs are format specifiers. @Wickham2023 has a long list of them in Chapter 18.\n\nAn alternative to the above approach is to use the helpers in the `lubridate` package, which is part of the `tidyverse` collection of packages. There are two kinds of helpers. First are the date helpers.\n\n```{r}\nymd(\"2017-01-31\")\nmdy(\"January 31st, 2017\")\ndmy(\"31-Jan-2017\")\n```\n\nSecond are the date-time helpers.\n\n```{r}\nymd_hms(\"2017-01-31 20:11:59\")\nmdy_hm(\"01/31/2017 08:01\")\n```\n\nThe `nycflights13` data frame, which we loaded above, contains information about 336,000 flights originating from the three NYC area airports in 2013. It contains dats and times spread across different columns.\n\n```{r}\nflights |>\n  select(year, month, day, hour, minute)\n```\n\nYou can handle this kind of input by using the `make_datetime()` function.\n\n```{r}\nflights |>\n  select(year, month, day, hour, minute) |>\n  mutate(departure = make_datetime(year, month, day, hour, minute))\n```\n\nYou can do the same with the other time columns.\n\n```{r}\nmake_datetime_100 <- function(year, month, day, time) {\n  make_datetime(year, month, day, time %/% 100, time %% 100)\n}\n\nflights_dt <- flights |>\n  filter(!is.na(dep_time), !is.na(arr_time)) |>\n  mutate(\n    dep_time = make_datetime_100(year, month, day, dep_time),\n    arr_time = make_datetime_100(year, month, day, arr_time),\n    sched_dep_time = make_datetime_100(year, month, day, sched_dep_time),\n    sched_arr_time = make_datetime_100(year, month, day, sched_arr_time)\n  ) |>\n  select(origin, dest, ends_with(\"delay\"), ends_with(\"time\"))\n\nflights_dt\n```\n\nHere are the departure times for January 2nd, 2013.\n\n```{r}\nflights_dt |>\n  filter(dep_time < ymd(20130102)) |>\n  ggplot(aes(x = dep_time)) +\n  geom_freqpoly(binwidth = 600) # 600 s = 10 minutes\n```\n\n## Time spans\n\n- Durations, which represent an exact number of seconds.\n- Periods, which represent human units like weeks and months.\n- Intervals, which represent a starting and ending point.\n\n### Durations\n\nBase R provides a problematic construct for durations, the *difftime* object.\n\n```{r}\n#. How old is Hadley?\nh_age <- today() - ymd(\"1979-10-14\")\nh_age\n```\n\nThe `lubridate` package provides a construct called *duration*.\n\n```{r}\nas.duration(h_age)\n```\n\nThere are numerous duration constructors.\n\n```{r}\ndseconds(15)\ndminutes(10)\ndhours(c(12, 24))\nddays(0:5)\ndweeks(3)\ndyears(1)\n```\n\nYou can add and multiply durations.\n\n```{r}\n2 * dyears(1)\ndyears(1) + dweeks(12) + dhours(15)\n```\n\nYou can add and subtract durations to and from days.\n\n```{r}\ntomorrow <- today() + ddays(1)\nlast_year <- today() - dyears(1)\n```\n\nProblem! Add one day to this particular date as a duration, but this particular date only has 23 hours because of daylight savings time.\n\n```{r}\none_am <- ymd_hms(\"2026-03-08 01:00:00\", tz = \"America/New_York\")\n\none_am\none_am + ddays(1)\n```\n\n## Periods\nThis construct gets over some problems with durations, which are always exact numbers of seconds and take into account time zones and daylight savings time and leap years.\n\nPeriods have constructors, too.\n\n```{r}\nhours(c(12, 24))\ndays(7)\nmonths(1:6)\n```\n\nYou can add and multiply periods.\n\n```{r}\n10 * (months(6) + days(1))\ndays(50) + hours(25) + minutes(2)\n```\n\nAdd them to dates and get the results you expect in the case of daylight savings time and leap years.\n\n```{r}\n#. A leap year\nymd(\"2024-01-01\") + dyears(1)\nymd(\"2024-01-01\") + years(1)\n\n#. Daylight Savings Time\none_am + ddays(1)\none_am + days(1)\n```\n\nPeriods can fix the problem that some planes appear to arrive before they depart.\n\n```{r}\nflights_dt |>\n  filter(arr_time < dep_time)\n```\n\nThese are overnight flights so fix the problem by adding a day.\n\n```{r}\nflights_dt <- flights_dt |>\n  mutate(\n    overnight = arr_time < dep_time,\n    arr_time = arr_time + days(!overnight),\n    sched_arr_time = sched_arr_time + days(overnight)\n  )\n```\n\n### Intervals\nIntervals are like durations but with a specific starting point. They get around the problem that, for example, some years are longer than others, so that a year on average is 365.25 days. With an interval you can have a specific year of 365 days or a specific leap year of 366 days.\n\n```{r}\ny2023 <- ymd(\"2023-01-01\") %--% ymd(\"2024-01-01\")\ny2024 <- ymd(\"2024-01-01\") %--% ymd(\"2025-01-01\")\n\ny2023\ny2024\n\ny2023 / days(1)\ny2024 / days(1)\n```\n\nThe book also provides extensive information about time zones but for the final exam you'll only have one time zone, so that discussion is not strictly necessary for us.\n\n## Joins\n\nThe `nycflights13` package provides five data frames that can be joined together.\n\n![](fiNYCflights13.png)\n\nWhy would you store data this way? (Think about using the data over a long term and think about maintenance of the data.)\n\nYou can add the airline names to the flights by a `left_join()` function. It's easier to see if you first limit the `flights` data frame to a few essential columns.\n\n```{r}\nflights2 <- flights |>\n  select(year, time_hour, origin, dest, tailnum, carrier)\nflights2 |> left_join(airlines)\n```\n\nThere are several different join functions described in @Wickham2023 in Chapter 20. You'll only need the left join for this week's exercises, but reading Chapter 20 is still a very good idea.\n\nYou should also read about [sqldf](https://www.rdocumentation.org/packages/sqldf/versions/0.4-11), a package for running SQL statements on R data frames. Following is an example of its use.\n\n```{r}\nlibrary(sqldf)\nsqldf(\"SELECT carrier, COUNT(*)\n         FROM flights\n         GROUP BY carrier\n         ORDER BY 2 DESC;\")\nsqlFlightsWnames <- sqldf(\"SELECT fl.carrier, name\n                             FROM flights fl\n                             LEFT join airlines ai\n                             ON fl.carrier=ai.carrier;\")\nsqldf(\"SELECT name, COUNT(*)\n         FROM sqlFlightsWnames\n         GROUP BY name\n         ORDER BY 2 DESC;\")\nsort(table(flights$carrier),decreasing=TRUE)\nflightsWnames <- flights |> left_join(airlines)\nsort(table(flightsWnames$name),decreasing=TRUE)\n```\n\nThe only difference between the output of these two approaches is that the native R plus tidyverse version uses more horizontal space in the output because of its use of a variable that records how wide your display is. The SQL version is piped (by default) to SQLite3, which doesn't know the width of your display and which returns a single column response. You can substitute other database engines for SQLite3, such as PostgreSQL and MySQL. SQLite3 is an extremely fast, tiny database engine which is useful for single-user applications. For example, most smartphone applications (including all Android and iOS) use SQLite3 to store information, making SQLite3 the world's most popular database (by some measures). SQLite3 is also used by most web browsers to store information.\n\nRecently (like within the last month) it was brought to the attention of the faculty that students want to learn more SQL. That's the reason I've added this mention of `sqldf`. In a later iteration of the course, I will require some use of SQL but I learned of the need for this too late to incorporate it this semester. So your study of `sqldf` this semester will be optional.\n\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"include-in-header":{"text":"<style>\n#quarto-sidebar .menu-text {\n  display: flex;\n}\n#quarto-sidebar .chapter-number {\n  display: block;\n  width: 1.5rem;\n  text-align: right;\n}\n#quarto-sidebar .chapter-title {\n  display: block;\n  padding-left: 8px;\n  text-indent: -2px;\n  width: 100%;\n}\n</style>\n"},"output-file":"week11.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.450","bibliography":["master.bib"],"mainfont":"Tex Gyre Schola","monofont":"JetBrainsMono Nerd Font","mathfont":"Tex Gyre Schola Math","theme":"cosmo","title":"Coping with Time and Joins"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}